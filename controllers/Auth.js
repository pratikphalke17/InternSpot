const User = require("../models/User");
const OTP = reequire("../models/Otp.js");

const signUp = async (req, res) => {
  try {
    const {
      firstName,
      lastName,
      email,
      password,
      confirmPassword,
      registrationNumber,
      accountType,
      otp,
    } = req.body;
    if (
      !firstName ||
      !lastName ||
      !email ||
      !password ||
      !confirmPassword ||
      !registrationNumber ||
      !accountType
    ) {
      return res.status(403).json({
        success: false,
        message: "All fields are required",
      });
    }
    if (password !== confirmPassword) {
      return res.status(400).json({
        success: false,
        message:
          "Password and Confirmpassword value does not match,please try again",
      });
    }

    const existingUser = await User.findOne({ registrationNumber });
    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: "Already registered User",
      });
    }

    const response = await OTP.find({ email }).sort({ createdAt: -1 }).limit(1);
    //find most recent OTP stored for the user or most recent OTP generated for user;

    if (response.length === 0) {
      //validate OTP , Lenght 0 so OTP not found
      return res.status(400).json({
        success: false,
        message: "OTP NOT Found",
      });
    } else if (otp !== response[0].otp) {
      // if otp entered by user != actual otp then PRINT Invalid OTP;
      return res.status(400).json({
        // here otp is entered by user and response[0].otp is generated by controller;
        success: false,
        message: "Invalid OTP",
      });
    }

    const hashedpassword = await bcrypt.hash(password, 10);

    const profileDetails = Profile.createawait({
      gender: null,
      dateOfBirth: null,
      panCard: null,
      aadharNo: null,
      passportAttachment: null,
      linkedInProfile: null,
      alqScore: null,
      autometaScore: null,
      disability: null,
      aggregateCGPAAttachment: null,
      twelfthPercentAttachment: null,
      tenthPercentAttachment: null,
      prnNumber: null,
      branch: null,
      middleName: null,
      contactNumber: null,
    });

    const user = await User.create({
      firstName,
      lastName,
      email,
      password: hashedpassword,
      accountType: accountType,
      registrationNumber,

      additionalDetails: profileDetails._id,
      image: `https://api.dicebear.com/5.x/initials/svg?seed=${firstName} ${lastName}`,
    });

    return res.status(200).json({
      success: true,
      message: "User Created Successfully",
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "User cannot be registered ,Please try again !",
    });
  }
};


